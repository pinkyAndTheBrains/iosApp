// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [AddExternalLoginBindingModel]
            Decoders.addDecoder(clazz: [AddExternalLoginBindingModel].self) { (source: AnyObject) -> [AddExternalLoginBindingModel] in
                return Decoders.decode(clazz: [AddExternalLoginBindingModel].self, source: source)
            }
            // Decoder for AddExternalLoginBindingModel
            Decoders.addDecoder(clazz: AddExternalLoginBindingModel.self) { (source: AnyObject) -> AddExternalLoginBindingModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddExternalLoginBindingModel()
                instance.externalAccessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ExternalAccessToken"])
                return instance
            }


            // Decoder for [ChangePasswordBindingModel]
            Decoders.addDecoder(clazz: [ChangePasswordBindingModel].self) { (source: AnyObject) -> [ChangePasswordBindingModel] in
                return Decoders.decode(clazz: [ChangePasswordBindingModel].self, source: source)
            }
            // Decoder for ChangePasswordBindingModel
            Decoders.addDecoder(clazz: ChangePasswordBindingModel.self) { (source: AnyObject) -> ChangePasswordBindingModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ChangePasswordBindingModel()
                instance.oldPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["OldPassword"])
                instance.newPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NewPassword"])
                instance.confirmPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfirmPassword"])
                return instance
            }


            // Decoder for [ExternalLoginViewModel]
            Decoders.addDecoder(clazz: [ExternalLoginViewModel].self) { (source: AnyObject) -> [ExternalLoginViewModel] in
                return Decoders.decode(clazz: [ExternalLoginViewModel].self, source: source)
            }
            // Decoder for ExternalLoginViewModel
            Decoders.addDecoder(clazz: ExternalLoginViewModel.self) { (source: AnyObject) -> ExternalLoginViewModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExternalLoginViewModel()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Url"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["State"])
                return instance
            }


            // Decoder for [ManageInfoViewModel]
            Decoders.addDecoder(clazz: [ManageInfoViewModel].self) { (source: AnyObject) -> [ManageInfoViewModel] in
                return Decoders.decode(clazz: [ManageInfoViewModel].self, source: source)
            }
            // Decoder for ManageInfoViewModel
            Decoders.addDecoder(clazz: ManageInfoViewModel.self) { (source: AnyObject) -> ManageInfoViewModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ManageInfoViewModel()
                instance.localLoginProvider = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LocalLoginProvider"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"])
                instance.logins = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Logins"])
                instance.externalLoginProviders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ExternalLoginProviders"])
                return instance
            }


            // Decoder for [Product]
            Decoders.addDecoder(clazz: [Product].self) { (source: AnyObject) -> [Product] in
                return Decoders.decode(clazz: [Product].self, source: source)
            }
            // Decoder for Product
            Decoders.addDecoder(clazz: Product.self) { (source: AnyObject) -> Product in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Product()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Price"])
                return instance
            }


            // Decoder for [RegisterBindingModel]
            Decoders.addDecoder(clazz: [RegisterBindingModel].self) { (source: AnyObject) -> [RegisterBindingModel] in
                return Decoders.decode(clazz: [RegisterBindingModel].self, source: source)
            }
            // Decoder for RegisterBindingModel
            Decoders.addDecoder(clazz: RegisterBindingModel.self) { (source: AnyObject) -> RegisterBindingModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RegisterBindingModel()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Password"])
                instance.confirmPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfirmPassword"])
                return instance
            }


            // Decoder for [RegisterExternalBindingModel]
            Decoders.addDecoder(clazz: [RegisterExternalBindingModel].self) { (source: AnyObject) -> [RegisterExternalBindingModel] in
                return Decoders.decode(clazz: [RegisterExternalBindingModel].self, source: source)
            }
            // Decoder for RegisterExternalBindingModel
            Decoders.addDecoder(clazz: RegisterExternalBindingModel.self) { (source: AnyObject) -> RegisterExternalBindingModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RegisterExternalBindingModel()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"])
                return instance
            }


            // Decoder for [RemoveLoginBindingModel]
            Decoders.addDecoder(clazz: [RemoveLoginBindingModel].self) { (source: AnyObject) -> [RemoveLoginBindingModel] in
                return Decoders.decode(clazz: [RemoveLoginBindingModel].self, source: source)
            }
            // Decoder for RemoveLoginBindingModel
            Decoders.addDecoder(clazz: RemoveLoginBindingModel.self) { (source: AnyObject) -> RemoveLoginBindingModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RemoveLoginBindingModel()
                instance.loginProvider = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LoginProvider"])
                instance.providerKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProviderKey"])
                return instance
            }


            // Decoder for [SetPasswordBindingModel]
            Decoders.addDecoder(clazz: [SetPasswordBindingModel].self) { (source: AnyObject) -> [SetPasswordBindingModel] in
                return Decoders.decode(clazz: [SetPasswordBindingModel].self, source: source)
            }
            // Decoder for SetPasswordBindingModel
            Decoders.addDecoder(clazz: SetPasswordBindingModel.self) { (source: AnyObject) -> SetPasswordBindingModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SetPasswordBindingModel()
                instance.newPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NewPassword"])
                instance.confirmPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ConfirmPassword"])
                return instance
            }


            // Decoder for [TransactionAuth]
            Decoders.addDecoder(clazz: [TransactionAuth].self) { (source: AnyObject) -> [TransactionAuth] in
                return Decoders.decode(clazz: [TransactionAuth].self, source: source)
            }
            // Decoder for TransactionAuth
            Decoders.addDecoder(clazz: TransactionAuth.self) { (source: AnyObject) -> TransactionAuth in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransactionAuth()
                instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TransactionId"])
                instance.authCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["AuthCode"])
                return instance
            }


            // Decoder for [UserInfoViewModel]
            Decoders.addDecoder(clazz: [UserInfoViewModel].self) { (source: AnyObject) -> [UserInfoViewModel] in
                return Decoders.decode(clazz: [UserInfoViewModel].self, source: source)
            }
            // Decoder for UserInfoViewModel
            Decoders.addDecoder(clazz: UserInfoViewModel.self) { (source: AnyObject) -> UserInfoViewModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserInfoViewModel()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Email"])
                instance.hasRegistered = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["HasRegistered"])
                instance.loginProvider = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LoginProvider"])
                return instance
            }


            // Decoder for [UserLoginInfoViewModel]
            Decoders.addDecoder(clazz: [UserLoginInfoViewModel].self) { (source: AnyObject) -> [UserLoginInfoViewModel] in
                return Decoders.decode(clazz: [UserLoginInfoViewModel].self, source: source)
            }
            // Decoder for UserLoginInfoViewModel
            Decoders.addDecoder(clazz: UserLoginInfoViewModel.self) { (source: AnyObject) -> UserLoginInfoViewModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserLoginInfoViewModel()
                instance.loginProvider = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LoginProvider"])
                instance.providerKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ProviderKey"])
                return instance
            }
        }
    }
}
